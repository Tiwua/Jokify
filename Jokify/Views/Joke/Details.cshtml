@model JokeDetailsViewModel

@{
    ViewBag.Title = "Joke Details";
}

<style>
    .admin-button{
        position:relative;
        right: 20px;
        margin-top: 10px;
    }
</style>

<h2 class="text-center">@ViewBag.Title</h2>
<div class="joke-container" data-id="@Model.Id">

    <h2>@Model.Title</h2>
    @if (@Model.IsEdited)
    {
        <span class="edited-joke-label">(edited)</span>
    }
    <p class="setup">@Model.Setup</p>
    <p class="punchline">@Model.Punchline</p>
    <div id="likes" class="likes">
        <div class="fixed-elements">
            <i class="fas fa-heart"></i>
            <span class="likes-count">@Model.LikesCount</span>
        </div>
    </div>
    @if ((User.Identity.IsAuthenticated && User.Identity.Name == Model.OwnerName) )
    {      
        <form method="get">

            <button class="edit-button" asp-controller="Joke" asp-action="Edit"
                asp-route-id="@Model.Id"
                asp-route-title="@Model.Title"
                asp-route-page="@Model.CurrentPage">
                Edit
            </button>
        </form>

        <form method="post" asp-controller="Joke"
          asp-action="Delete"
          asp-route-id="@Model.Id"
          asp-route-title="@Model.Title"
          asp-route-page="@Model.CurrentPage">
          <div>

            <button type="submit" onclick="jokeConfirm(event)" class="delete-joke-button">Delete</button>
          </div>
        </form>
    }
    else
    {
        if (Model.HasLiked)
        {
            <form method="post" asp-controller="Joke"
          asp-action="Dislike"
          asp-route-id="@Model.Id"
          asp-route-title="@Model.Title"
          asp-route-page="@Model.CurrentPage">

                <button type="submit" class="dislike-button">Just Kidding</button>
            </form>
        }
        else
        {
            <form method="post" asp-controller="Joke"
          asp-action="Like"
          asp-route-id="@Model.Id"
          asp-route-title="@Model.Title"
          asp-route-page="@Model.CurrentPage">

                <button type="submit" class="like-button">Like</button>
            </form>

        }
    }
    @if ((User.Identity.IsAuthenticated && User.Identity.Name != Model.OwnerName) && User.IsInRole("Administrator"))
    {
        <div class="admin-button">

            <form method="get">

                <button class="edit-button" asp-controller="Joke" asp-action="Edit"
                    asp-route-id="@Model.Id"
                    asp-route-title="@Model.Title"
                    asp-route-page="@Model.CurrentPage">
                    Edit
                </button>
            </form>

            <form method="post" asp-controller="Joke"
              asp-action="Delete"
              asp-route-id="@Model.Id"
              asp-route-title="@Model.Title"
              asp-route-page="@Model.CurrentPage">
                <div>

                    <button type="submit" onclick="jokeConfirm(event)" class="delete-joke-button">Delete</button>
                </div>
            </form>
        </div>
    }
</div>



<div class="comment-section">
    <h2>Comments</h2>


    @if (Model.Comments.Count == 0)
    {
        <p>No comments yet.</p>
    }
    else
    {
        foreach (var comment in Model.Comments)
        {
            {
                var stringDate = comment.CreatedOn;
                var date = DateTime.Parse(stringDate).Hour;
                var now = DateTime.Now.Hour;


                <div class="comment">
                    @if (comment.IsEdited)
                    {
                        <span class="edited-label">(edited)</span>
                    }
                    <p class="text">@comment.Content</p>
                    <span class="comment-author">Posted by @comment.User</span>
                    @if (User.Identity.IsAuthenticated && comment.UserId == Model.CurrUser)
                    {
                        <form class="edit-form" data-comment-id="@comment.Id" style="display:none;">
                            <textarea class="comment-content" asp-for="@Model.CommentContent" rows="3"></textarea>
                            <span asp-validation-for="@Model.CommentContent" class="text-danger"></span>
                            <button type="button" class="cancel-button">Cancel</button>
                            <button type="button" class="save-button">Save</button>
                        </form>
                        <a class="edit-button" data-comment-id="@comment.Id">Edit</a>
                        <form id="delete-comment-form" method="post" asp-controller="Comment"
                              asp-action="Delete"
                              asp-route-id="@comment.Id" ,
                              asp-route-jokeId="@Model.Id"
                              asp-route-title="@Model.Title"
                              asp-route-page="@Model.CurrentPage">
                            <div>
                                <button type="submit" onclick="commentConfirm(event)" class="delete-comment-button">Delete</button>
                            </div>
                        </form>
                    }
                </div>
            }
        }
    }

    @if (!Model.HasUserCommented)
    {
        <form method="post" asp-controller="Comment"
          asp-action="AddComment"
          asp-route-id="@Model.Id"
          asp-route-title="@Model.Title"
          asp-route-page="@Model.CurrentPage">

            <h3>Add a Comment</h3>
            <textarea class="form-control" asp-for="@Model.CommentContent" rows="3"></textarea>
            <span asp-validation-for="@Model.CommentContent" class="text-danger"></span>
            <button type="submit" class="comment-button">Post Comment</button>
        </form>
    }
    @{
        var previousPage = Model.CurrentPage - 1;
        if (previousPage < 1)
        {
            previousPage = 1;
        }

        var maxPage = Math.Ceiling((double)Model.TotalComments /
        Model.PageSize);
    }

    @{
        var shouldButtonBeDisabled = Model.CurrentPage == maxPage ||
        !Model.Comments.Any();
    }

    <div class="left">
        <a class="arrow-box@(Model.CurrentPage == 1 ? "-disabled" : string.Empty)"
           asp-controller="Joke"
           asp-action="Details"
           asp-route-page="@previousPage">
            <span class="arrow button-left">
                &larr;
            </span>
        </a>
    </div>


    <div class="right">
        <a class="arrow-box@(shouldButtonBeDisabled ? "-disabled" : string.Empty)"
           asp-controller="Joke"
           asp-action="Details"
           asp-route-page="@(Model.CurrentPage + 1)">
            <span class="arrow button-right">
                &rarr;
            </span>
        </a>
    </div>
</div>
<div>
</div>

    <partial name="_ValidationScriptsPartial" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="~/js/details.js"></script>
<script>
    $(document).ready(function () {
        $(".cancel-button").on("click", function () {
            const commentId = $(this).closest(".edit-form").data("comment-id");
            const editButton = $(".edit-button[data-comment-id='" + commentId + "']");
            const editForm = $(".edit-form[data-comment-id='" + commentId + "']");


            editButton.show();
            editForm.hide();
        });
    });

    $(document).ready(function () {
        $(".edit-button").on("click", function () {
            const target = event.target;
            const commentId = $(this).data("comment-id");
            const editForm = $(this).closest(".comment-section").find(".edit-form");
            const saveButton = document.querySelector('.save-button');

            const commentContainer = document.querySelector('.comment');
            const commentElement = target.closest('.comment');
            const commentTextElement = commentElement.querySelector('.text');

            const oldText = commentElement.querySelector(".text").textContent;
            const editContent = commentContainer.querySelector(".comment-content");
            if (target.classList.contains('edit-button') || target.classList.contains('delete-button')) {

                $(this).hide();

                const commentElement = target.closest('.comment');
                const commentTextElement = commentElement.querySelector('.text');

                editForm.find("textarea").val(commentTextElement.textContent).focus();
                editForm.show();
                function updateSaveButtonState() {
                    const hasChanges = commentTextElement.textContent !== editContent.value;

                    if (hasChanges) {
                        saveButton.disabled = false;
                        saveButton.classList.remove('disabled');
                    } else {
                        saveButton.disabled = true;
                        saveButton.classList.add('disabled');

                    }
                }

                updateSaveButtonState();

                editContent.addEventListener('input', updateSaveButtonState);
            }

        });
    });

    $(document).ready(function () {
        $(".save-button").on("click", function () {

            const commentId = $(this).closest(".edit-form").data("comment-id");
            const commentTextarea = document.querySelector('.comment-content');
            const commentElement = document.querySelector('.page');

            const commentContainer = document.querySelector('.comment');
            const target = event.target;
            const commentContent = commentTextarea.value;

            const editForm = $(this).closest(".comment-section").find(".edit-form");

            const ajaxUrl = "https://localhost:7085/api/content/" + commentId;
            $.ajax({
                url: ajaxUrl,
                type: "PUT",
                contentType: "application/json",
                data: JSON.stringify(commentContent),
                success: function (response) {
                    if (response.success) {
                        const commentElement = target.closest('.comment');
                        const hasSpanClass = commentElement.querySelector("span");

                        if (!hasSpanClass) {
                            const editedSpan = document.createElement('span');
                            editedSpan.classList.add('edited-label');
                            editedSpan.textContent = '(edited)';

                            commentElement.prepend(editedSpan);
                        }

                        const commentTextElement = commentElement.querySelector('.text');

                        const commentTextarea = document.querySelector('.comment-content');

                        const text = commentElement.querySelector(".text");
                        commentTextElement.textContent = commentTextarea.value;

                        editForm.hide();
                        var editButton = $(".edit-button[data-comment-id='" + commentId + "']");
                        editButton.show();
                    } else {
                        console.log(response.errorMessage);
                    }
                },
                error: function () {
                    console.log("Failed");
                }
            });
        });
    });
</script>
    <script>
    function jokeConfirm(e) {
            e.preventDefault();
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it'
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire(
                        'Deleted!',
                        'The joke has been deleted.',
                        'success'
                    ).then((resultDeleted) => {
                        e.target.parentElement.parentElement.submit();
                    })
                }
            })
        }

    function commentConfirm(e) {
        e.preventDefault();
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            cancelButtonText: 'Cancel',
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it'
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire(
                    'Deleted!',
                    'The comment has been deleted.',
                    'success'
                ).then((resultDeleted) => {
                    e.target.parentElement.parentElement.submit();
                })
            }
        })
    }
    </script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<link href="~/css/details.css" rel="stylesheet" />    
<script src="~/lib/limonte-sweetalert2/sweetalert2.js"></script>
<script src="~/lib/limonte-sweetalert2/sweetalert2.all.js"></script>
<script src="~/lib/limonte-sweetalert2/sweetalert2.all.min.js"></script>
<script src="~/lib/limonte-sweetalert2/sweetalert2.js"></script>
<script src="~/lib/limonte-sweetalert2/sweetalert2.min.js"></script>
<link href="~/lib/limonte-sweetalert2/sweetalert2.css" rel="stylesheet" />
<link href="~/lib/limonte-sweetalert2/sweetalert2.min.css" rel="stylesheet" />